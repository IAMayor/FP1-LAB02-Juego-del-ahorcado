import random

def elige_palabra(fichero="..\palabras.txt"):
    """
    Devuelve una palabra aleatoria tomada de un fichero de texto.

    Par√°metros:
        fichero: ruta al archivo que contiene las palabras (una por l√≠nea).

    Devuelve:
        Una palabra (str) elegida al azar del fichero.
    """
    with open(fichero, "r", encoding="utf-8") as f:
        lineas = f.readlines()
    # Quitar saltos de l√≠nea y espacios
    palabras = [linea.strip() for linea in lineas if linea.strip() != ""]
    return random.choice(palabras)


def normalizar(cadena):
    """
    Normaliza una cadena de texto realizando las siguientes operaciones:
        - convierte a min√∫sculas
        - quita espacios en blanco al principio y al final
        - elimina acentos y di√©resis        
    
    Par√°metros:
      cadena: cadena de texto que hay que sanear
    
    Devuelve:
      Cadena de texto con la palabra normalizada
    """
    # TODO: Implementa esta funci√≥n (y elimina la instrucci√≥n pass)
    texto=cadena.lower() #todo minusculas
    texto=texto.strip() #quitar espacios delante y detr√°s
    texto2=""
    for c in texto:
        if c in "√°√§" :
            c="a"
        elif c in '√©√´':
            c='e' 
        elif c in '√≠√Ø':
            c='i' 
        elif c in '√≥√∂':
            c='o' 
        elif c in '√∫√º':
            c='u'
        texto2+=c
  

    return texto2 


def ocultar(palabra_secreta, letras_usadas=""):
    '''Devuelve una cadena de texto con la palabra enmascarada. 
    Las letras que no est√°n en letras_usadas se muestran como guiones bajos (_).

    Par√°metros:
    - palabra_secreta: cadena de texto con la palabra que se debe enmascarar
    - letras_usadas: cadena de texto con las letras que se deben mostrar (por defecto cadena vac√≠a)

    Devuelve:
      Cadena de texto con la palabra enmascarada
    '''
    # TODO: Implementa esta funci√≥n (y elimina la instrucci√≥n pass)
    texto=""
    for c in palabra_secreta:
        if c in letras_usadas:
            texto+=c 
        else:
            texto+="_"
    return texto 


def ha_ganado(palabra_enmascarada):
    '''Devuelve True si el jugador ha ganado (es decir, si no quedan letras por descubrir en la palabra enmascarada).

    Par√°metros:
    - palabra_enmascarada: cadena de texto con la palabra enmascarada 

    Devuelve:
    - True si el jugador ha ganado, False en caso contrario
    '''
    # TODO: Implementa esta funci√≥n (y elimina la instrucci√≥n pass)
    if "_" in palabra_enmascarada:
        return False
    else:
        return True


# TODO: Implementa la funci√≥n mostrar_estado
def mostrar_estado(palabra, letras, intentos_restan):
    '''
    la funci√≥n `mostrar_estado` que usaremos durante el juego 
    para mostrar
    al jugador informaci√≥n sobre el transcurso del juego. 

    La funci√≥n recibe por par√°metros 
    palabra: la palabra enmascarada, 
    letras: las letras ya usadas y 
    intentos_restan: los intentos restantes. 

    Un ejemplo de la salida mostrada en el terminal al llamar a la funci√≥n 
    ser√≠a el siguiente:
    '''
    print (f"{"-"*10}")
    print (f"Estado :{" ".join(palabra)} ")  

    if letras=="":
        print ("Letras usadas: ninguna")
    else:
        print ("Letras usadas: ",letras)
    print (" Intentos restantes: ", intentos_restan)
    return None

# TODO: Implementa la funci√≥n pedir_letra
def pedir_letra (letras_antes:str):
    '''
    Implementa la funci√≥n `pedir_letra`, que solicita al jugador que introduzca una letra y se asegura de que la entrada proporcionada 
    por el jugador sea v√°lida. Debe escribir la cabecera de la funci√≥n y su cadena de documentaci√≥n.
    
    Para que la entrada recibida del usuario sea v√°lida debe cumplirse que:
    - Sea una letra (y solo una)
    - No sea una letra que ya se ha pedido anteriormente

    La funci√≥n recibe un par√°metro con las letras ya solicitadas anteriormente. Si el jugador no introduce una entrada v√°lida, 
    la funci√≥n le informa y se la vuelve a pedir, hasta que el jugador introduzca una letra v√°lida. 
    En ese momento, la funci√≥n devuelve dicha letra, **siempre en min√∫culas**.

    Una posible salida en el terminal de una llamada a la funci√≥n ser√≠a esta 
    (suponiendo que las letras usadas incluyen s√≥lo a la letra `a`)
    '''
    sigue=True
    while sigue: #en realidad saldr√° del bucle con el return
        letra=input("Introduce una letra: ").lower()
        if len(letra)>1:
            print ("Debes introducir una √∫nica letra")   
        elif not letra.isalpha():
            print ("Debes introducir una letra")
        elif letra in letras_antes:
            print ("Esa letra ya la has utilizado")
        else: 
            return letra
    return None 


# TODO: Implementa la funci√≥n jugar
def jugar(palabra_secreta, intentos=6):
    '''
    La funci√≥n `jugar` recibe la palabra secreta que hay que adivinar y el n√∫mero m√°ximo de intentos (por defecto, ser√° 6).
    1. **Inicializaci√≥n**:  
    - Normalizamos la palabra mediante la funci√≥n `normalizar`.  
    - Si la palabra est√° vac√≠a, devolvemos `None` (y el juego termina).  
    - Enmascaramos la palabra mediante la funci√≥n `ocultar`.  
    - Inicializamos una variable con el n√∫mero m√°ximo de intentos.  
    - Inicializamos una variable con las letras usadas hasta el momento (cadena vac√≠a).  

    2. **Bucle principal**:  
    - Mientras el jugador tenga intentos restantes y no haya ganado:  
        - Muestra el estado del juego usando `mostrar_estado`.  
        - Pide una nueva letra usando `pedir_letra`.  
        - A√±ade a las letras usadas la que acabas de leer.  
        - Si la letra recibida no pertenece a la palabra secreta:              
            - Muestra un mensaje indic√°ndolo.  
            - Resta 1 a los intentos.  
        - Si la letra recibida s√≠ pertenece a la palabra secreta:  
            - Muestra un mensaje indic√°ndolo.  
            - Actualiza la palabra enmascarada mediante la funci√≥n `ocultar`.  

    3. **Fin del juego**: muestra un mensaje indicando si el jugador ha ganado o ha perdido, y cu√°l era la palabra original.

    '''
    palabra=normalizar(palabra_secreta)
    if palabra=="":
        return None 
    mascara=ocultar(palabra)
    veces=0
    letras=""
    no_gana=True
    while veces<intentos and no_gana:
        mostrar_estado(mascara,letras,intentos-veces)
        nueva_letra=pedir_letra(letras)
        letras+=nueva_letra
        if nueva_letra in palabra:
            print(f"La letra '{nueva_letra}' EST√Ñ en la palabra secreta ‚úÖ \n ")
            mascara=ocultar(palabra,letras)
            if "_" not in mascara:
                no_gana=False
        else:
            print(f"La letra '{nueva_letra}' no se encuentra en la palabra secreta ‚ùå \n")
            veces+=1
    print ("*** Fin del juego ***") 
    if no_gana:
        print (f"Lo siento has superado el m√°ximo de intentos la palabra secreta era {palabra}")
    else:
        print (f"üéâ¬°¬°¬° ENHORABUENA !!! has ACERTADO la palabra secreta {palabra.upper()} üéâ")
    return None

# TODO: Escribe el programa principal
palabra_alea=elige_palabra()
jugar(palabra_alea)
